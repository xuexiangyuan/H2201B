let
特点：
1.变量不能重复声明 当前作用域不能进行重复声明 下一个可以重复声明
2.块级作用域
3.不存在变量提升
4.不影响作用域链 
5.块级作用域由 { } 包括 if语句和for语句里面的{ } 也属于块级作用域


作用域链 作用域链 是运行时代码的某些特定部分中变量 函数和对象可以访问
作用域链是一个独特的地盘 让变量不会外泄 暴露出去 
也就是说 作用域最大是用处就是隔离变量 不同作用域下同名变量不会由冲突

es6前 只有全局作用域 和函数作用域 es6才有 块级作用域


const
特点：
1.声明的 常量不可以更改 
2.声明是用大写来表示
3.块级作用域
4. 声明基本数据类型不能更改 会报错  声明复杂数据类型 值可以更改  因为堆和栈 
复杂数据类型只修改堆中间的内容，栈的引用没有变 不会报错



DOM获取节点
getElementsByClassName，getElementsByName，getElementsByYagName 是数组
querySelectorAll 获取到的是伪数组



变量结构赋值
数组解构赋值
1.以下标进行结构 ，有顺序的解构 不能单独解构出一个值
2.解构数组的时候嵌套的是数组
对象结构赋值
1.仪属性名来进行解构 可以但如解构任何一个属性
2..解构对象的时候嵌套的是数组



模板字符串
原生js的模板字符串拼接
let name ='张杰'
let lover ='谢娜'
一行 拼接 可以  直接+号拼接  let result = '张杰'+'谢娜'
换行 用字符串 +字符串号拼接
展示到页面  document.write(result)


es6  直接用 ` ` 就可以 
展示到页面 document.write(result)




对象简化写法
属性和值相同的时候可以简写 
let name='高薪'
            let hope =function(){
                console.log('我希望高薪就业');
            }

            const PERSION ={
                name,
                hope,
            }



箭头函数
this 是静态的 this 始终指向函数声明时所在作用域下的this的值
不能作为构造实例对象   箭头函数没有自己的this指向 没有构造器 不能作为实例化对象
普通函数有arguments  箭头函数不能使用 arguments(啊giu们特) 伪数组

arguments 是一个类似于数组的对象，对应于传递给函数的参数，他有length属性，
三、arguments可以用下标来  访问对象中的元素，但是他不能用数组的一些方法

形参只有一个的时候可以简写小括号 
只有一条 返回语句的时候 return 花括号可以省略


====================================
函数参数的默认设置 
函数参数有两种  形参 和实参
形参：形参就是相当于函数中定义的变量
实参：实参是在运行时的函数调用时传入的参数

形参初始值 具有默认值的参数 一般位置要靠后
=========================================

reset 参数
Es6 引入了reest 参数 用于获取函数的实参 用来代替 arguments
Es5 获取实参的方式 用argument 是一个伪数组，不传递参数 就是空 没有东西
Es6 去掉了argument  可以用...展开运算符
rest 参数必须要放到参数最后面


=====================================



================================
扩展运算符
扩展运算符能将数组转换为 逗号分割的参数序列
原生js中 把一个数组转为用逗号分割的字符串 用join( ' , ' )


扩展运算符的应用

数组合并 可以用 展开运算符 
const a=['张三'，'老六']  const b=['王五'，'老六']
const c=[...a , ...b]
还可以用concat 
const c=a.concat(b)


也可以用来克隆数组
const san=['e','g','m']
const sanyecao =[ ...san ]

将伪数组转为真的数组
const divs =document.querySeletorAll( ' div ' )
const divArr =[ ...divs ]
伪数组转数组通过Array.from()
=========================


=========================
Symbol
Symbol的值时唯一的，用来解决命名冲突的问题
Symbol值不能和其他数据进行运算
Symbol定义的对象属性不能使用for...in 循环遍历 但是可以使用 
Reflect(瑞付来丝)  ownkesy 来获取对象所有键名

不能与其他数据进行运算
=========================


=========================
promise
为了解决回调地狱的问题 所有产生了 promise
概念：promise简单说就是一个容器 里面存着未来才会结束的事件(通常时一个异步操作)
的结果
从语法上说 promise 是一个对象 从他可以获取异步操作的消息
promise提供统一的api 各种异步操作都可以用同样的方法进行处理

promise状态不受外界影响 三个状态 pending(进行中)，fulfilled(已成功),rejected(以失败)
一旦状态改变 就不会再变 任何时候都可以得到这个结果  romise 对象状态改变 只有两种可能 
从pending变为fulfilled 或者rejected 只要这两种情况发生 状态就凝固了 不会在变 会一直
保持这个结果 ，这时resolved已定型 如果改变已经发生了 在对promise添加回调函数
也会立刻得到这个结果  和事件Event完全不同  事件的特点就是 错过了他 再去监听 时得不到结果的

event loop  事件循环 （一文他 路pe）
js是单线程语言 同一时间只能执行一个任务
同步任务会先执行 执行完第一个在执行下一个
异步任务 有宏任务 ( setTimeout  DOM事件 ) 微任务（ Promise async/await ）
微任务比宏任务的执行时间要早
先执行同步任务 碰到异步的就就放到等待区 同步执行完后才会执行

=========================




作业========================================

dom获取节点所有方法
get ElementById()   通过id选中元素
get ElementByClassName()  通过类名选中元素
get ElementByTagName()  通过标签名 选中元素
get ElementByName() 通过name属性获取元素
querySelector  通过类名获取
 querySelectorAll 通过类名获取所有class相等的元素集合



arguments
arguments 对象实际上是所在函数的一个内置类数组对象
arguments不是数组而是一个对象，但它和数组很相似，所以通常称为类数组对象
arguments同样具有length属性，arguments.length 为函数实参个数，可以用arguments[length]显示调用参数
普通函数有arguments  箭头函数不能使用 arguments(啊giu们特) 伪数组


区分伪数组和数组

伪数组：
有length属性
伪数组没有数组的方法
但是不能使用数组的其他方法，也不能改变长度，遍历使用for in方法。
转数组通过Array.from()
判断是否是数组可以用Array.isArray ( ) 
普通数组有很多数组的方法，比如说push，shift，unshift等等


伪数组转换成真数组方法
1.先声明一个空数组，然后遍历伪数组，将伪数组中的值通过索引逐个添加到新数组当中
2.利用Array的原型对象的slice方法，配合call()方法修改slice中this指向 
---------slice原本是数组的截取子数组的方法，这里给数组的原型对象方法slice的指向强制改成
3.利用扩展运算符(...)将伪数组转化为真数组 
4.ES6语法 let newArr=[];


